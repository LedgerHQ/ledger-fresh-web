import { useState } from "react";
import styles from "./Webauthn.module.css";
import { Button } from "@/components/Button";
import Main from "@/components/MainContainer";
import { getKeyCredentialCreationOptions } from "@/utils/webauthn";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";

export default function Webauthn() {
  const [username, setUsername] = useState<string>("");
  const router = useRouter();

  const register = async () => {
    try {
      // fetch the challenge and the userId
      const [challengeRes, userIdRes] = await Promise.all([
        fetch("/api/webauthn/challenge"),
        fetch("/api/userId", {
          method: "POST",
          body: JSON.stringify({ username }),
        }),
      ]);
      const [challenge, { userId }] = await Promise.all([
        challengeRes.arrayBuffer(),
        userIdRes.json(),
      ]);

      // get the current domain
      const currentDomain = window.location.hostname;

      // create the options for webauthn
      const options = getKeyCredentialCreationOptions(
        challenge,
        currentDomain,
        username,
        Buffer.from(userId, "utf8")
      );

      // create the credential
      const credential = await navigator.credentials.create(options);
      console.log(credential);
      localStorage.setItem("walletName", username);

      router.push("/created");
      /**
       * @TODO redirect */

      /**
       * @TODO At this point, the challenge, the username and the credential need to be returned to the server
       * The server has the responsibility to verify if the challenge matches the one previously returned
       * and it must validate the certificate generated by the authenticator
       * If everything is good, the certificate and the username would be stored
       */
    } catch (e) {
      console.error(e);
      throw e;
    }
  };

  return (
    <div className="page">
      <Main>
        <Link href="/create" className={styles.icon}>
          <Image
            src="/Icons/arrow-left-rtl.svg"
            alt="back"
            width={20}
            height={20}
            priority
          />
        </Link>
        <label htmlFor="username">
          <h2>Give a name to your wallet</h2>
          <p className={styles.subtitle}>
            This name will be only displayed to you and stored locally.
          </p>
        </label>
        <input
          className={styles.input}
          name="username"
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="Wallet name"
        />
      </Main>
      <div className={styles.buttonRow}>
        <Button variant={username ? "primary" : "secondary"} onClick={register}>
          Create a new wallet
        </Button>
      </div>
    </div>
  );
}
